// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.4
// source: protobuf/serve.proto

package grpcService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RouteService_GetRoute_FullMethodName        = "/RouteService/GetRoute"
	RouteService_GetStationOrder_FullMethodName = "/RouteService/GetStationOrder"
)

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	GetRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*Route, error)
	GetStationOrder(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteStationResponse, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) GetRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, RouteService_GetRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetStationOrder(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RouteStationResponse, error) {
	out := new(RouteStationResponse)
	err := c.cc.Invoke(ctx, RouteService_GetStationOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations must embed UnimplementedRouteServiceServer
// for forward compatibility
type RouteServiceServer interface {
	GetRoute(context.Context, *RouteRequest) (*Route, error)
	GetStationOrder(context.Context, *RouteRequest) (*RouteStationResponse, error)
	mustEmbedUnimplementedRouteServiceServer()
}

// UnimplementedRouteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRouteServiceServer struct {
}

func (UnimplementedRouteServiceServer) GetRoute(context.Context, *RouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedRouteServiceServer) GetStationOrder(context.Context, *RouteRequest) (*RouteStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationOrder not implemented")
}
func (UnimplementedRouteServiceServer) mustEmbedUnimplementedRouteServiceServer() {}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetRoute(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetStationOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetStationOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetStationOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetStationOrder(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoute",
			Handler:    _RouteService_GetRoute_Handler,
		},
		{
			MethodName: "GetStationOrder",
			Handler:    _RouteService_GetStationOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/serve.proto",
}

const (
	RouteStationService_GetAllStationOfRoute_FullMethodName = "/RouteStationService/GetAllStationOfRoute"
)

// RouteStationServiceClient is the client API for RouteStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteStationServiceClient interface {
	GetAllStationOfRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*Station, error)
}

type routeStationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteStationServiceClient(cc grpc.ClientConnInterface) RouteStationServiceClient {
	return &routeStationServiceClient{cc}
}

func (c *routeStationServiceClient) GetAllStationOfRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*Station, error) {
	out := new(Station)
	err := c.cc.Invoke(ctx, RouteStationService_GetAllStationOfRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteStationServiceServer is the server API for RouteStationService service.
// All implementations must embed UnimplementedRouteStationServiceServer
// for forward compatibility
type RouteStationServiceServer interface {
	GetAllStationOfRoute(context.Context, *RouteRequest) (*Station, error)
	mustEmbedUnimplementedRouteStationServiceServer()
}

// UnimplementedRouteStationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRouteStationServiceServer struct {
}

func (UnimplementedRouteStationServiceServer) GetAllStationOfRoute(context.Context, *RouteRequest) (*Station, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStationOfRoute not implemented")
}
func (UnimplementedRouteStationServiceServer) mustEmbedUnimplementedRouteStationServiceServer() {}

// UnsafeRouteStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteStationServiceServer will
// result in compilation errors.
type UnsafeRouteStationServiceServer interface {
	mustEmbedUnimplementedRouteStationServiceServer()
}

func RegisterRouteStationServiceServer(s grpc.ServiceRegistrar, srv RouteStationServiceServer) {
	s.RegisterService(&RouteStationService_ServiceDesc, srv)
}

func _RouteStationService_GetAllStationOfRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteStationServiceServer).GetAllStationOfRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteStationService_GetAllStationOfRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteStationServiceServer).GetAllStationOfRoute(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteStationService_ServiceDesc is the grpc.ServiceDesc for RouteStationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteStationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RouteStationService",
	HandlerType: (*RouteStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllStationOfRoute",
			Handler:    _RouteStationService_GetAllStationOfRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/serve.proto",
}
